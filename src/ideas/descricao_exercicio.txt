1 - exemplos de código que dá problema com a transferência (a=b)
2 - exemplos de código que dá problema com o empréstimo (a=&b) -> quando tiver função
3 - implementar uma trait com funções (exemplos: PartialOrd, Ord, PartialEq, Eq, Display)
4 - criar uma trait e implementar
5 - usar as enums Option<T> e Result<T,E>
6 - Criar uma enum valorada 
7 - implementar as structs com encapsulamento

1 e 2 -> fazer separado mostrando como dar problema

---------------------------------------------------------------------------------------------------------------------------

rpg

mod Character
struct genericCharacter {
	- health
	- strength
	- defense

	// TODO multiple defenses (like mr)

	- name

	- status (enum)
		- alive, dead, disabled

	- condition (enum valorada)
		- well (100% a 40%)
		- hurt (10% a 39%)
		- unconscious (0% a 9%)

		if condition == well {
			strength = 1 * strength
			defense = 1 * defense
		}

		if condition == hurt {
			strength = 0.8 * strength
			defense = 0.8 * defense
		}

		if condition == unconscious {
			cannot figth (status = disabled)
		}


	// impl 
	fn new

	fn get health
	fn get strength
	fn get defense
	fn get name
	fn get status
	fn get condition

	fn set health
	fn set strength
	fn set defense
	fn set name
	fn set status
	fn set condition 
}

*mod Battle
trait BattleActions {
	fn attack
	fn defense
	fn special
}

trait Battle1v1 {
	// vai pegar 2  genericCharacter 
}

trait BattleNvN {
	// ver se vale a pena
}

* mod Attacks
struct specialAttack {
	name:
	damage:
	// TODO damage type
}

enum availableSpecialAttacks {
	// enum de specialAttack
}
